@charset "utf-8";
@use "sass:math";
@use "breakpoint";
@use "variables";

// コンテンツ幅
// $width: sm || md || lg
@mixin content_width($width: md) {
  width: 100%;
  padding-right: variables.$content_padding_sm;
  padding-left: variables.$content_padding_sm;
  margin-right: auto;
  margin-left: auto;

  @if $width == sm {
    // TODO: あとで調整する
    @include breakpoint.mq(md) {
      padding-right: 60px;
      padding-left: 60px;
    }
  } @else if $width == md {
    // TODO: あとで調整する
    @include breakpoint.mq(md) {
      padding-right: variables.$content_padding_lg;
      padding-left: variables.$content_padding_lg;
    }
  } @else if $width == lg {
    @include breakpoint.mq(md) {
      padding-right: variables.$content_padding_lg;
      padding-left: variables.$content_padding_lg;
    }
  } @else if $width == xl {
    // TODO: あとで調整する
    @include breakpoint.mq(md) {
      padding-right: 60px;
      padding-left: 60px;
    }
  }

  @if $width == sm {
    max-width: calc(#{variables.$content_width_sm} + #{variables.$content_padding_md} * 2);
  } @else if $width == md {
    max-width: calc(#{variables.$content_width_md} + #{variables.$content_padding_lg} * 2);
  } @else if $width == lg {
    max-width: calc(#{variables.$content_width_lg} + #{variables.$content_padding_lg} * 2);
  } @else if $width == xl {
    max-width: calc(#{variables.$content_width_xl} + #{variables.$content_padding_md} * 2);
  }
}

@mixin original_content_width($width: 1000px, $paddingMd: 60px, $paddingUnderMd: 20px) {
  width: 100%;
  padding-right: $paddingUnderMd;
  padding-left: $paddingUnderMd;
  margin-right: auto;
  margin-left: auto;

  @include breakpoint.mq(md) {
    max-width: calc($width + $paddingMd * 2);
    padding-right: $paddingMd;
    padding-left: $paddingMd;
  }
}

// clampの推奨値を計算する（プロパティ指定あり）
@mixin clamp_mix($property, $minBp, $maxBp, $minVal, $maxVal) {
  $a: calc(100 * ($maxVal - $minVal) / ($maxBp - $minBp));
  $b: calc($minVal - ($minBp / 100) * $a);
  $vw: calc(#{$a}vw + #{$b}px);

  #{$property}: clamp(#{$minVal}px, #{$vw}, #{$maxVal}px);
}

// clampの推奨値を計算する（プロパティ指定なし）
@function clamp_value($minBp, $maxBp, $minVal, $maxVal) {
  $a: calc(100 * ($maxVal - $minVal) / ($maxBp - $minBp));
  $b: calc($minVal - ($minBp / 100) * $a);
  $vw: calc(#{$a}vw + #{$b}px);

  @return clamp(#{$minVal}px, #{$vw}, #{$maxVal}px);
}

// object-fit
// $fit: object-fit値、$position: object-position値
@mixin object_fit($fit: cover, $position: null) {
  object-fit: $fit;

  @if $position {
    object-position: $position;
    font-family: "object-fit: #{$fit}; object-position: #{$position}";
  } @else {
    font-family: "object-fit: #{$fit};";
  }
}

// visually-hidden:
// 視覚的にコンテンツを非表示にしたい場合や、スクリーンリーダーや
// 検索エンジンからアクセスできるようにしたい場合に使う
@mixin visually_hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  border: 0;
}

// 行数制御
// 引数の数値以下の行数は表示し、それ以上の行数は「...」で省略する
@mixin line_clamp($count: 3) {
  @if type-of($count) != "number" {
    @error 'line-clampの引数は必ず数値で指定してください';
  }

  @if $count == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $count;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// 印刷対応
@mixin print {
  @media print {
    @content;
  }
}

// @include clearfix;
@mixin clearfix {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// ブラウザハック

// Mozilla Firefox
@mixin only_firefox {
  @supports (-moz-appearance: meterbar) {
    @content;
  }
}

// Safari
@mixin only_safari {
  @supports (paint-order: fill) and (-webkit-marquee-speed: 0) {
    @content;
  }
}

// iOS Safari
@mixin only_iOS {
  @supports (-webkit-text-size-adjust: none) and (not (-ms-accelerator: true)) and (not (-moz-appearance: none)) {
    @content;
  }
}

// Microsoft Edge
@mixin only_edge {
  @supports (-ms-ime-align: auto) {
    @content;
  }
}
